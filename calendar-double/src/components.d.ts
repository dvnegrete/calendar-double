/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { CalendarEntry } from "./utils/interfaces/calendarEntry";
export { CalendarEntry } from "./utils/interfaces/calendarEntry";
export namespace Components {
    interface CalendarDouble {
    }
    interface CalendarSingle {
        "calendarActive": boolean;
        "dateCalendar": CalendarEntry;
        "numberCalendar": 'main' | 'secondary';
        "setCalendar": CalendarEntry;
    }
    interface HeaderCalendar {
        "nameInactive": boolean;
        "nameMonth": string;
        "position": 'left' | 'right';
        "twoArrow": boolean;
        "year": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface HeaderCalendarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLHeaderCalendarElement;
}
declare global {
    interface HTMLCalendarDoubleElement extends Components.CalendarDouble, HTMLStencilElement {
    }
    var HTMLCalendarDoubleElement: {
        prototype: HTMLCalendarDoubleElement;
        new (): HTMLCalendarDoubleElement;
    };
    interface HTMLCalendarSingleElement extends Components.CalendarSingle, HTMLStencilElement {
    }
    var HTMLCalendarSingleElement: {
        prototype: HTMLCalendarSingleElement;
        new (): HTMLCalendarSingleElement;
    };
    interface HTMLHeaderCalendarElementEventMap {
        "nextMonthCalendar": any;
        "previousMonthCalendar": any;
    }
    interface HTMLHeaderCalendarElement extends Components.HeaderCalendar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLHeaderCalendarElementEventMap>(type: K, listener: (this: HTMLHeaderCalendarElement, ev: HeaderCalendarCustomEvent<HTMLHeaderCalendarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLHeaderCalendarElementEventMap>(type: K, listener: (this: HTMLHeaderCalendarElement, ev: HeaderCalendarCustomEvent<HTMLHeaderCalendarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLHeaderCalendarElement: {
        prototype: HTMLHeaderCalendarElement;
        new (): HTMLHeaderCalendarElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "calendar-double": HTMLCalendarDoubleElement;
        "calendar-single": HTMLCalendarSingleElement;
        "header-calendar": HTMLHeaderCalendarElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface CalendarDouble {
    }
    interface CalendarSingle {
        "calendarActive"?: boolean;
        "dateCalendar"?: CalendarEntry;
        "numberCalendar"?: 'main' | 'secondary';
        "setCalendar"?: CalendarEntry;
    }
    interface HeaderCalendar {
        "nameInactive"?: boolean;
        "nameMonth"?: string;
        "onNextMonthCalendar"?: (event: HeaderCalendarCustomEvent<any>) => void;
        "onPreviousMonthCalendar"?: (event: HeaderCalendarCustomEvent<any>) => void;
        "position"?: 'left' | 'right';
        "twoArrow"?: boolean;
        "year"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "calendar-double": CalendarDouble;
        "calendar-single": CalendarSingle;
        "header-calendar": HeaderCalendar;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "calendar-double": LocalJSX.CalendarDouble & JSXBase.HTMLAttributes<HTMLCalendarDoubleElement>;
            "calendar-single": LocalJSX.CalendarSingle & JSXBase.HTMLAttributes<HTMLCalendarSingleElement>;
            "header-calendar": LocalJSX.HeaderCalendar & JSXBase.HTMLAttributes<HTMLHeaderCalendarElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
